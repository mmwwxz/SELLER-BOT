import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.utils import executor
import pandas as pd
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import os
from decouple import config as config_settings
import aiofiles
import time


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = config_settings('TELEGRAM_BOT_TOKEN')

ALLOWED_USER_IDS = [1238343405, 5477009884]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587
SMTP_USERNAME = config_settings('SMTP_USERNAME')
SMTP_PASSWORD = config_settings('SMTP_PASSWORD')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
class Form(StatesGroup):
    MAIN_MENU = State()
    FILE_NAME = State()
    LINKS_FILE_NAME = State()
    DUPLICATES_FILE_NAME = State()
    CREATE_FILE = State()
    SEND_EMAILS = State()
    UPLOAD_FILE = State()
    ADD_DATA = State()
    GET_LINKS = State()
    CHECK_DUPLICATES = State()
    SEARCH_EMAIL = State()


def check_user(func):
    async def wrapper(message: types.Message, state: FSMContext):
        if message.from_user.id not in ALLOWED_USER_IDS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        return await func(message, state)
    return wrapper


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
@dp.message_handler(commands='start', state='*')
@check_user
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–í—ã–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã', '–ü–æ–∏—Å–∫ –ø–æ –ø–æ—á—Ç–µ', '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª', '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É']
    keyboard.add(*buttons)
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
    await Form.MAIN_MENU.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
@check_user
async def save_data_to_file(name, email, file_name):
    file_path = 'data/data_storage.txt'
    with open(file_path, 'a') as file:
        file.write(f"{name},{email},{file_name}\n")


@dp.message_handler(lambda message: message.text == '–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª', state=Form.MAIN_MENU)
@check_user
async def request_file_name(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:', reply_markup=ReplyKeyboardRemove())
    await Form.FILE_NAME.set()


@dp.message_handler(state=Form.FILE_NAME)
@check_user
async def create_file(message: types.Message, state: FSMContext):
    file_name = message.text.strip()
    await state.update_data(file_name=file_name, data=[])
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è\nEmail')
    await Form.ADD_DATA.set()


@dp.message_handler(state=Form.ADD_DATA)
@check_user
async def add_data(message: types.Message, state: FSMContext):
    text = message.text
    if text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª':
        await finish_and_create_file(message, state)
        return

    parts = text.split('\n')
    if len(parts) != 2:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ò–º—è\nEmail')
        return

    name, email = parts
    name = name.title()

    async with state.proxy() as data:
        if 'data' not in data:
            data['data'] = []

        file_name = data['file_name']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for entry in data['data']:
            if entry['email'].lower() == email.lower():
                await message.answer(f'–ß–µ–ª–æ–≤–µ–∫ —Å email {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.')
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email –≤ data_storage.txt
        file_path = 'data/data_storage.txt'
        email_exists = False
        try:
            with open(file_path, 'r') as file:
                lines = file.readlines()
                for line in lines:
                    stored_email = line.split(',')[1].strip().lower()
                    if stored_email == email.lower():
                        email_exists = True
                        break
        except FileNotFoundError:
            pass

        if email_exists:
            await message.answer(f'–ß–µ–ª–æ–≤–µ–∫ —Å email {email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.')
            return

        data['data'].append({'name': name, 'email': email, 'file_name': file_name})
        await save_data_to_file(name, email, file_name)

    await message.answer('–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª".')
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª']
    keyboard.add(*buttons)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:', reply_markup=keyboard)


@check_user
async def finish_and_create_file(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file_name = data.get('file_name', 'output').strip()

    new_subject = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!'
    new_body_template = (
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!\n'
        '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–π–±–µ–∫, –∏ —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é —à–≤–µ–π–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ. –ú–æ–π –æ–ø—ã—Ç –≤ —à–≤–µ–π–Ω–æ–π —Å—Ñ–µ—Ä–µ '
        '—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 24 –≥–æ–¥–∞, –∏ —è —Å–∞–º —è–≤–ª—è—é—Å—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–æ–º –∏ –∑–∞–∫—Ä–æ–π—â–∏–∫–æ–º –∂–µ–Ω—Å–∫–æ–π –∏ –¥–µ—Ç—Å–∫–æ–π –æ–¥–µ–∂–¥—ã.\n\n'
        '–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã –Ω–∞ –Ω–∞—à–∏—Ö —Ñ–∞–±—Ä–∏–∫–∞—Ö. –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n\n'
        '- –ë–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: 24 –≥–æ–¥–∞ –≤ —à–≤–µ–π–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.\n'
        '- –ö–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.\n'
        '- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –≤ –ú–æ—Å–∫–≤–µ.\n'
        '- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∫–∞–∫ –ø–æ –Ω–∞–ª–∏—á–Ω–æ–º—É, —Ç–∞–∫ –∏ –±–µ–∑–Ω–∞–ª–∏—á–Ω–æ–º—É —Ä–∞—Å—á–µ—Ç—É.\n'
        '- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞ –≤ –†–æ—Å—Å–∏–∏ üá∑üá∫ –∏ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ üá∞üá¨.\n\n'
        '–ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –Ω–∞—à–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –±—É–¥–µ—Ç –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω—ã–º –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º, {name}, —É–≤–µ–ª–∏—á–∏—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∏ '
        '—É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –í–∞–π–ª–¥–±–µ—Ä–∏–∑.\n\n'
        '–ë—É–¥–µ–º —Ä–∞–¥—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n'
        '–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n'
        'ismailovaiba79@gmail.com\n'
        '+996552446644\n'
        'https://wa.me/+996552446644\n'
        'https://t.me/Aibalux\n'
        'Whatsapp/Telegram\n\n'
        '–° —É–≤–∞–∂–µ–Ω–∏–µ–º,\n'
        '–ê–π–±–µ–∫'
    )

    df = pd.DataFrame({
        'Email': [entry['email'] for entry in data['data']],
        'Subject': [new_subject.format(name=entry['name']) for entry in data['data']],
        'Body': [new_body_template.format(name=entry['name']) for entry in data['data']]
    })

    new_file_path = f'email/{file_name}.xlsx'
    df.to_excel(new_file_path, index=False)

    with open(new_file_path, 'rb') as file:
        await message.answer_document(file, caption=f'–§–∞–π–ª "{file_name}.xlsx" —Å–æ–∑–¥–∞–Ω.')

    await state.finish()
    await start(message)


# –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–∏—Å–µ–º
@dp.message_handler(lambda message: message.text == '–ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', state=Form.MAIN_MENU)
@check_user
async def start_sending_emails(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.', reply_markup=ReplyKeyboardRemove())
    await Form.UPLOAD_FILE.set()


@check_user
async def check_email_in_history(email_to_check):
    file_path = 'data/data_storage.txt'
    async with aiofiles.open(file_path, 'r') as file:
        async for line in file:
            parts = line.strip().split(',')
            if len(parts) == 3:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Å —Ç—Ä–µ–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                name, stored_email, file_name = parts
                if stored_email.lower() == email_to_check.lower():
                    return True
    return False


@dp.message_handler(content_types=types.ContentType.DOCUMENT, state=Form.UPLOAD_FILE)
@check_user
async def handle_uploaded_file(message: types.Message, state: FSMContext):
    document = message.document
    file_path = await document.download(destination='data/uploaded_emails.xlsx')

    df = pd.read_excel(file_path.name)

    total_emails = len(df)
    emails_sent = 0
    emails_skipped = 0

    start_time = time.time()

    for index, row in df.iterrows():
        to_address = row['Email']
        subject = row['Subject']
        body = row['Body']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if await check_email_in_history(to_address):
            await message.answer(f'Email {to_address} —É–∂–µ –µ—Å—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É.')
            emails_skipped += 1
            continue

        try:
            send_email(to_address, subject, body)
            emails_sent += 1
            current_time = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
            await message.answer(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∏—Å–µ–º {emails_sent}/{total_emails} –Ω–∞ –∞–¥—Ä–µ—Å {to_address}'
                                 f' –≤ {current_time}')
        except Exception as e:
            await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –Ω–∞ –∞–¥—Ä–µ—Å {to_address}: {e}')

    end_time = time.time()
    total_time = end_time - start_time

    await message.answer(f'–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {emails_sent} –ø–∏—Å–µ–º –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥.')
    if emails_skipped > 0:
        await message.answer(f'–ü—Ä–æ–ø—É—â–µ–Ω–æ {emails_skipped} –ø–∏—Å–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏.')

    await state.finish()
    await start(message)


# –û—Ç–ø—Ä–∞–≤–∫–∞ email
@check_user
def send_email(to_address, subject, body):
    msg = MIMEMultipart()
    msg['From'] = SMTP_USERNAME
    msg['To'] = to_address
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)


# –í—ã–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏
@dp.message_handler(lambda message: message.text == '–í—ã–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫–∏', state=Form.MAIN_MENU)
@check_user
async def request_links_file_name(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫:', reply_markup=ReplyKeyboardRemove())
    await Form.LINKS_FILE_NAME.set()


@dp.message_handler(state=Form.LINKS_FILE_NAME)
@check_user
async def handle_links_file_name(message: types.Message, state: FSMContext):
    file_name = message.text.strip()

    await state.update_data(links_file_name=file_name)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫.')

    await Form.GET_LINKS.set()


@dp.message_handler(content_types=types.ContentType.DOCUMENT, state=Form.GET_LINKS)
@check_user
async def handle_links_file(message: types.Message, state: FSMContext):
    document = message.document
    file_path = await document.download(destination='data/uploaded_data.xlsx')

    data = await state.get_data()
    links_file_name = data.get('links_file_name', 'links').strip()

    df = pd.read_excel(file_path.name)

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –≤—ã–±–æ—Ä –æ–¥–Ω–æ–≥–æ SKU –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    df_unique = df.drop_duplicates(subset=['–ë—Ä–µ–Ω–¥']).reset_index(drop=True)

    sku_list = df_unique['SKU'].tolist()

    base_url = "https://www.wildberries.ru/catalog/"
    links = []

    for sku in sku_list:
        url = base_url + str(sku) + "/detail.aspx"
        links.append(url)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    unique_links = list(set(links))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –∑–∞—Ç–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫

    # –ó–∞–ø–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    links_str = ""
    for idx, link in enumerate(unique_links, start=1):
        links_str += f"{idx}. {link}\n"

    links_file_path = f'info/{links_file_name}.txt'
    with open(links_file_path, 'w') as file:
        file.write(links_str)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ –≤ Excel —Ñ–∞–π–ª
    output_file_path = f'info/without_duplicates_{links_file_name}.xlsx'
    df_unique.to_excel(output_file_path, index=False)

    with open(links_file_path, 'rb') as file:
        await message.answer_document(file, caption=f'–°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ "{links_file_name}.txt"')

    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤: {len(df)}')
    await message.answer(f"–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df) - len(df_unique)}")

    await state.finish()
    await start(message)


@dp.message_handler(lambda message: message.text == '–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã', state=Form.MAIN_MENU)
@check_user
async def request_duplicates_file_name(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', reply_markup=ReplyKeyboardRemove())
    await Form.DUPLICATES_FILE_NAME.set()


@dp.message_handler(state=Form.DUPLICATES_FILE_NAME)
@check_user
async def handle_duplicates_file_name(message: types.Message, state: FSMContext):
    file_name = message.text.strip()

    await state.update_data(duplicates_file_name=file_name)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TXT —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã.')

    await Form.CHECK_DUPLICATES.set()


@dp.message_handler(content_types=types.ContentType.DOCUMENT, state=Form.CHECK_DUPLICATES)
@check_user
async def handle_duplicates_file(message: types.Message, state: FSMContext):
    document = message.document
    file_path = await document.download(destination='uploaded_links.txt')

    data = await state.get_data()
    duplicates_file_name = data.get('duplicates_file_name', 'duplicates').strip()

    with open(file_path.name, 'r') as file:
        links = file.readlines()

    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    unique_links = list(set([link.strip() for link in links]))
    duplicates_count = len(links) - len(unique_links)

    # –ó–∞–ø–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    output_file_path = f'info/{duplicates_file_name}.txt'
    with open(output_file_path, 'w') as file:
        for index, link in enumerate(unique_links, start=1):
            file.write(f"{index}. {link}\n")

    await message.answer_document(open(output_file_path, 'rb'), caption=f'–°—Å—ã–ª–∫–∏ –±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ '
                                                                        f'"{duplicates_file_name}.txt"')
    await message.answer(f'–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {len(links)}')
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_count}')
    await message.answer(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {len(unique_links)}')

    await state.finish()
    await start(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ email
@dp.message_handler(lambda message: message.text == '–ü–æ–∏—Å–∫ –ø–æ –ø–æ—á—Ç–µ', state=Form.MAIN_MENU)
@check_user
async def search_by_email(message: types.Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=ReplyKeyboardRemove())
    await Form.SEARCH_EMAIL.set()


@check_user
async def search_data_by_email(email_to_search):
    results = []
    files_with_email = []

    # –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–π–ª–∞–º
    file_path = 'data/data_storage.txt'
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split(',')
            if len(parts) == 3:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–∞–∫–∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                name, email, file_name = parts
                if email.lower() == email_to_search.lower():
                    results.append({'name': name, 'email': email, 'file_name': file_name})
                    files_with_email.append(file_name)

    return results, files_with_email


@dp.message_handler(state=Form.SEARCH_EMAIL)
@check_user
async def handle_search_email(message: types.Message, state: FSMContext):
    email_to_search = message.text.strip().lower()

    results, files_with_email = await search_data_by_email(email_to_search)

    if results:
        response = f'Email –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–∞—Ö:\n'
        for filename in files_with_email:
            response += f'- {filename}\n'

        response += '\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n'
        for result in results:
            response += f'–ò–º—è: {result["name"]}, Email: {result["email"]}, –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {result["file_name"]}\n'
    else:
        response = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'

    await message.answer(response)

    await state.finish()
    await start(message)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
